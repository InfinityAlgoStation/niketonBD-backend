// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ExtraCharge {
  id               String             @id @default(uuid())
  title            String
  icon             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  HouseExtraCharge HouseExtraCharge[]

  @@map("extraCharge")
}

model Amenity {
  id           String         @id @default(uuid())
  title        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  HouseAmenity HouseAmenity[]

  @@map("amenities")
}

model House {
  id               String          @id @default(uuid())
  houseName        String
  address          String
  category         HouseCategory
  tenantType       TenantType
  quntity          Int?            @default(1)
  rentFee          Float
  furnishing       FurnishingType?
  parking          Boolean?
  tenantGender     TenantGender?
  minBookingCharge Int
  gellary          String[]
  shortVideo       String?
  rules            String?
  status           HouseStatus     @default(AVAILABLE)
  details          String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  houseOwner       Owner           @relation(fields: [ownerId], references: [id])
  ownerId          String
  RentRequest      Request[]

  HouseAmenity     HouseAmenity[]
  HouseExtraCharge HouseExtraCharge[]

  @@map("houses")
}

model HousePost {
  id               String        @id @default(uuid())
  houseName        String
  address          String
  contact          String
  gellary          String[]
  details          String
  category         HouseCategory
  rentFee          Float
  minBookingCharge Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HouseExtraCharge {
  house   House  @relation(fields: [houseId], references: [id])
  houseId String

  extraCharge   ExtraCharge @relation(fields: [extraChargeId], references: [id])
  extraChargeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([houseId, extraChargeId])
}

model HouseAmenity {
  house   House  @relation(fields: [houseId], references: [id])
  houseId String

  amenity   Amenity @relation(fields: [amenityId], references: [id])
  amenityId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([houseId, amenityId])
}

model User {
  id         String      @id @default(uuid())
  role       Role
  userName   String      @unique
  verified   Boolean     @default(false)
  firstName  String?
  lastName   String?
  email      String      @unique
  phone      String?     @unique
  address    String?
  photo      String?
  gender     String?
  password   String
  token      String?
  nid        String?
  owner      Owner?
  tenant     Tenant?
  superAdmin SuperAdmin?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("users")
}

model Owner {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  houses      House[]
  feedbacks    Feedback[]
  userId      String     @unique
  rentRequest Request[]
  contract    Contract[]

  @@map("owners")
}

model Tenant {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @unique
  feedback    Feedback[]
  rentRequest Request[]
  contract    Contract[]

  @@map("tetants")
}

// model Admin {
//   id           String   @id @default(uuid())
//   makeBy       String
//   user
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   superAdminId String

//   @@map("admin")
// }

model SuperAdmin {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  @@map("superAdmin")
}

model Feedback {
  id          String   @id @default(uuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       Owner    @relation(fields: [ownerId], references: [id])
  ownerId     String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    String

  @@map("feedbacks")
}

model Request {
  id            String      @id @default(uuid())
  requestStatus String      @default("PENDING")
  requestType   RequestType
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  house         House       @relation(fields: [houseId], references: [id])
  houseId       String
  owner         Owner       @relation(fields: [ownerId], references: [id])
  ownerId       String
  tenant        Tenant      @relation(fields: [tenantId], references: [id])
  tenantId      String

  @@map("request")
}

model Contract {
  id        String         @id @default(uuid())
  status    ContractStatus
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  owner     Owner          @relation(fields: [ownerId], references: [id])
  ownerId   String
  tenant    Tenant         @relation(fields: [tenantId], references: [id])
  tenantId  String

  @@map("contracts")
}

enum ContractStatus {
  RUNNING
  END
}

enum RequestType {
  BOOKING
  LEAVE
}

enum FurnishingType {
  FURNISHED
  SEMI_FURNISHED
  UNFURNISHED
}

enum TenantGender {
  MALE
  FEMALE
}

enum TenantType {
  SUBLATE
  BACHELOR
  FAMILY
}

enum HouseStatus {
  AVAILABLE
  BOOKED
}

enum HouseCategory {
  FLAT
  SINGLE_ROOM
  HOSTEL
  SHOP
  OFFICE
  GARAGE
}

enum Role {
  SUPERADMIN
  ADMIN
  OWNER
  TENANT
}
